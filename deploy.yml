name: Terraform Multi-Cloud Deployment

on:
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: "Choose Cloud Provider (AWS/GCP/Azure)"
        required: true
        default: "AWS"
      aws_access_key:
        description: "AWS Access Key ID"
        required: false
      aws_secret_key:
        description: "AWS Secret Access Key"
        required: false
      aws_session_token:
        description: "AWS Session Token (for temporary credentials)"
        required: false
      gcp_key_file:
        description: "GCP Key File JSON"
        required: false
      azure_client_id:
        description: "Azure Client ID"
        required: false
      azure_secret:
        description: "Azure Secret Key"
        required: false
      deployment_mode:
        description: "Choose Deployment Type: sandbox (Django) or production (WordPress)"
        required: true
        default: "sandbox"
      use_existing_key_pair:
        description: "Use existing key pair? (true/false)"
        required: false
        default: "false"
      existing_key_pair_name:
        description: "Name of existing key pair if applicable"
        required: false
      use_existing_vpc:
        description: "Use existing VPC? (true/false)"
        required: false
        default: "false"
      existing_vpc_id:
        description: "Existing VPC ID (if applicable)"
        required: false
      setup_demo_clone:
        description: "Demo mode? Install clgi.org site layout? (true/false)"
        required: false
        default: "false"

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      TF_VAR_cloud_provider: ${{ inputs.cloud_provider }}
      TF_VAR_gcp_credentials_path: ${{ inputs.gcp_key_file }}
      TF_VAR_aws_access_key: ${{ inputs.aws_access_key }}
      TF_VAR_aws_secret_key: ${{ inputs.aws_secret_key }}
      TF_VAR_aws_session_token: ${{ inputs.aws_session_token }}
      TF_VAR_azure_client_id: ${{ inputs.azure_client_id }}
      TF_VAR_azure_secret: ${{ inputs.azure_secret }}
      TF_VAR_deployment_mode: ${{ inputs.deployment_mode }}
      TF_VAR_use_existing_key_pair: ${{ inputs.use_existing_key_pair }}
      TF_VAR_existing_key_pair_name: ${{ inputs.existing_key_pair_name }}
      TF_VAR_use_existing_vpc: ${{ inputs.use_existing_vpc }}
      TF_VAR_existing_vpc_id: ${{ inputs.existing_vpc_id }}
      TF_VAR_setup_demo_clone: ${{ inputs.setup_demo_clone }}

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v3

      - name: üîß Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: üõ† Format Terraform Code
        run: terraform fmt -recursive

      - name: üîÑ Initialize Terraform
        run: terraform init

      - name: ‚úÖ Validate Terraform Configuration
        run: terraform validate

      - name: üìú Preview Terraform Plan
        run: terraform plan

      - name: üöÄ Apply Terraform Deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key }}
          AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_key }}
          AWS_SESSION_TOKEN: ${{ inputs.aws_session_token }}
        run: |
          echo "üåç Deploying to ${{ inputs.cloud_provider }}..."
          terraform apply -auto-approve \
            -var="cloud_provider=${{ inputs.cloud_provider }}" \
            -var="deployment_mode=${{ inputs.deployment_mode }}" \
            -var="use_existing_key_pair=${{ inputs.use_existing_key_pair }}" \
            -var="existing_key_pair_name=${{ inputs.existing_key_pair_name }}" \
            -var="use_existing_vpc=${{ inputs.use_existing_vpc }}" \
            -var="existing_vpc_id=${{ inputs.existing_vpc_id }}" \
            -var="setup_demo_clone=${{ inputs.setup_demo_clone }}"           