name: Update AWS Credentials and Terraform Cloud Variables

on:
  workflow_dispatch:
    inputs:
      aws_access_key:
        description: 'AWS Access Key ID'
        required: true
        type: string
      aws_secret_key:
        description: 'AWS Secret Access Key'
        required: true
        type: string
      aws_session_token:
        description: 'AWS Session Token (optional)'
        required: false
        type: string
      terraform_org:
        description: 'Terraform Cloud Organization Name'
        required: true
        type: string
      terraform_workspace:
        description: 'Terraform Cloud Workspace Name'
        required: true
        type: string
      reminder_note:
        description: 'ℹ️ Reminder: Ensure GitHub PAT and Terraform PAT are set as secrets: GH_PAT_FOR_SECRETS and TERRAFORM_PAT'
        required: false
        default: '✅ PATs must be stored as secrets in Settings > Secrets'

jobs:
  update-secrets:
    runs-on: ubuntu-latest

    env:
      GH_PAT: ${{ secrets.GH_PAT_FOR_SECRETS }}
      TFC_TOKEN: ${{ secrets.TERRAFORM_PAT }}
      AWS_ACCESS_KEY: ${{ inputs.aws_access_key }}
      AWS_SECRET_KEY: ${{ inputs.aws_secret_key }}
      AWS_SESSION_TOKEN: ${{ inputs.aws_session_token }}
      ORG_NAME: ${{ inputs.terraform_org }}
      WORKSPACE_NAME: ${{ inputs.terraform_workspace }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get GitHub repo info
        id: repo
        run: |
          echo "REPO=${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          echo "OWNER=${GITHUB_REPOSITORY%/*}" >> $GITHUB_ENV
          echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Get GitHub public key for secrets
        id: get-key
        run: |
          response=$(curl -s -H "Authorization: token $GH_PAT" \
            https://api.github.com/repos/${{ env.REPO }}/actions/secrets/public-key)

          echo "$response" | jq .
          echo "KEY_ID=$(echo "$response" | jq -r '.key_id')" >> $GITHUB_ENV
          echo "PUBLIC_KEY=$(echo "$response" | jq -r '.key')" >> $GITHUB_ENV

      - name: Encrypt and upload GitHub Secrets
        run: |
          encrypt() {
            echo "$2" | openssl rsautl -encrypt -pubin -inkey <(echo "$1" | base64 -d) | base64 | tr -d '\n'
          }

          GH_API="https://api.github.com/repos/${{ env.REPO }}/actions/secrets"

          for VAR in AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY; do
            VALUE_VAR="${VAR/AWS_/AWS_}"
            VALUE="${!VALUE_VAR}"
            echo "Updating $VAR..."

            curl -s -X PUT "$GH_API/$VAR" \
              -H "Authorization: token $GH_PAT" \
              -H "Content-Type: application/json" \
              --data @- <<EOF
{
  "encrypted_value": "$(
    echo -n "$VALUE" | \
    echo "$PUBLIC_KEY" | base64 -d | openssl rsautl -encrypt -pubin | base64 | tr -d '\n'
  )",
  "key_id": "${{ env.KEY_ID }}"
}
EOF
          done

          if [ -n "$AWS_SESSION_TOKEN" ]; then
            echo "Updating AWS_SESSION_TOKEN..."
            curl -s -X PUT "$GH_API/AWS_SESSION_TOKEN" \
              -H "Authorization: token $GH_PAT" \
              -H "Content-Type: application/json" \
              --data @- <<EOF
{
  "encrypted_value": "$(
    echo -n "$AWS_SESSION_TOKEN" | \
    echo "$PUBLIC_KEY" | base64 -d | openssl rsautl -encrypt -pubin | base64 | tr -d '\n'
  )",
  "key_id": "${{ env.KEY_ID }}"
}
EOF
          fi

      - name: Get Terraform Cloud Workspace ID
        id: get-tfc-ws
        run: |
          response=$(curl -s \
            --header "Authorization: Bearer $TFC_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/$ORG_NAME/workspaces/$WORKSPACE_NAME")

          WORKSPACE_ID=$(echo "$response" | jq -r '.data.id')
          if [[ "$WORKSPACE_ID" == "null" || -z "$WORKSPACE_ID" ]]; then
            echo "❌ Workspace not found."
            exit 1
          fi
          echo "WORKSPACE_ID=$WORKSPACE_ID" >> $GITHUB_ENV

      - name: Update Terraform Cloud Variables
        run: |
          update_var() {
            local KEY="$1"
            local VALUE="$2"
            local VAR_ID=$(curl -s \
              --header "Authorization: Bearer $TFC_TOKEN" \
              --header "Content-Type: application/vnd.api+json" \
              "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars" | \
              jq -r ".data[] | select(.attributes.key==\"$KEY\") | .id")

            PAYLOAD=$(jq -n \
              --arg key "$KEY" \
              --arg value "$VALUE" \
              '{
                data: {
                  type: "vars",
                  attributes: {
                    key: $key,
                    value: $value,
                    category: "env",
                    hcl: false,
                    sensitive: true
                  }
                }
              }')

            if [ -n "$VAR_ID" ]; then
              curl -s -X PATCH \
                --header "Authorization: Bearer $TFC_TOKEN" \
                --header "Content-Type: application/vnd.api+json" \
                --data "$PAYLOAD" \
                "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars/$VAR_ID"
            else
              curl -s -X POST \
                --header "Authorization: Bearer $TFC_TOKEN" \
                --header "Content-Type: application/vnd.api+json" \
                --data "$PAYLOAD" \
                "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars"
            fi
          }

          update_var "AWS_ACCESS_KEY_ID" "$AWS_ACCESS_KEY"
          update_var "AWS_SECRET_ACCESS_KEY" "$AWS_SECRET_KEY"

          if [ -n "$AWS_SESSION_TOKEN" ]; then
            update_var "AWS_SESSION_TOKEN" "$AWS_SESSION_TOKEN"
          fi

          echo "✅ Terraform Cloud variables updated."
