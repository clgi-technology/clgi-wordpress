name: Update AWS Credentials and Terraform Cloud Variables

on:
  workflow_dispatch:
    inputs:
      aws_access_key:
        description: 'AWS Access Key ID'
        required: true
        type: string
      aws_secret_key:
        description: 'AWS Secret Access Key'
        required: true
        type: string
      aws_session_token:
        description: 'AWS Session Token (optional)'
        required: false
        type: string
      terraform_org:
        description: 'Terraform Cloud Organization Name'
        required: true
        type: string
      terraform_workspace:
        description: 'Terraform Cloud Workspace Name'
        required: true
        type: string

jobs:
  update-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set GitHub Secret - AWS_ACCESS_KEY_ID
        uses: actions/github-script@v6
        with:
          script: |
            const { aws_access_key } = process.env;
            const { data: publicKey } = await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const sodium = require('libsodium-wrappers');
            await sodium.ready;
            const encrypted = sodium.crypto_box_seal(
              Buffer.from(aws_access_key),
              Buffer.from(publicKey.key, 'base64')
            );

            await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: "AWS_ACCESS_KEY_ID",
              encrypted_value: Buffer.from(encrypted).toString('base64'),
              key_id: publicKey.key_id
            });
        env:
          aws_access_key: ${{ github.event.inputs.aws_access_key }}

      - name: Set GitHub Secret - AWS_SECRET_ACCESS_KEY
        uses: actions/github-script@v6
        with:
          script: |
            const { aws_secret_key } = process.env;
            const { data: publicKey } = await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const sodium = require('libsodium-wrappers');
            await sodium.ready;
            const encrypted = sodium.crypto_box_seal(
              Buffer.from(aws_secret_key),
              Buffer.from(publicKey.key, 'base64')
            );

            await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: "AWS_SECRET_ACCESS_KEY",
              encrypted_value: Buffer.from(encrypted).toString('base64'),
              key_id: publicKey.key_id
            });
        env:
          aws_secret_key: ${{ github.event.inputs.aws_secret_key }}

      - name: Set GitHub Secret - AWS_SESSION_TOKEN (if provided)
        if: ${{ github.event.inputs.aws_session_token != '' }}
        uses: actions/github-script@v6
        with:
          script: |
            const { aws_session_token } = process.env;
            const { data: publicKey } = await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const sodium = require('libsodium-wrappers');
            await sodium.ready;
            const encrypted = sodium.crypto_box_seal(
              Buffer.from(aws_session_token),
              Buffer.from(publicKey.key, 'base64')
            );

            await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: "AWS_SESSION_TOKEN",
              encrypted_value: Buffer.from(encrypted).toString('base64'),
              key_id: publicKey.key_id
            });
        env:
          aws_session_token: ${{ github.event.inputs.aws_session_token }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Update Terraform Cloud Variables
        env:
          TFC_TOKEN: ${{ secrets.TF_API_TOKEN }}
          ORG_NAME: ${{ github.event.inputs.terraform_org }}
          WORKSPACE_NAME: ${{ github.event.inputs.terraform_workspace }}
          AWS_ACCESS_KEY: ${{ github.event.inputs.aws_access_key }}
          AWS_SECRET_KEY: ${{ github.event.inputs.aws_secret_key }}
          AWS_SESSION_TOKEN: ${{ github.event.inputs.aws_session_token }}
        run: |
          echo "üîç Fetching workspace ID..."
          WORKSPACE_ID=$(curl -s \
            --header "Authorization: Bearer $TFC_TOKEN" \
            "https://app.terraform.io/api/v2/organizations/$ORG_NAME/workspaces/$WORKSPACE_NAME" | jq -r '.data.id')

          if [ -z "$WORKSPACE_ID" ] || [ "$WORKSPACE_ID" = "null" ]; then
            echo "‚ùå Workspace not found!"
            exit 1
          fi

          set_variable() {
            KEY=$1
            VALUE=$2

            VAR_ID=$(curl -s \
              --header "Authorization: Bearer $TFC_TOKEN" \
              "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars" | \
              jq -r ".data[] | select(.attributes.key==\"$KEY\") | .id")

            PAYLOAD=$(jq -n --arg key "$KEY" --arg value "$VALUE" '{
              data: {
                type: "vars",
                attributes: {
                  key: $key,
                  value: $value,
                  category: "env",
                  hcl: false,
                  sensitive: true
                }
              }
            }')

            if [ -z "$VAR_ID" ]; then
              echo "‚ûï Creating $KEY..."
              curl -s -X POST \
                --header "Authorization: Bearer $TFC_TOKEN" \
                --header "Content-Type: application/vnd.api+json" \
                --data "$PAYLOAD" \
                "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars"
            else
              echo "‚ôªÔ∏è Updating $KEY..."
              curl -s -X PATCH \
                --header "Authorization: Bearer $TFC_TOKEN" \
                --header "Content-Type: application/vnd.api+json" \
                --data "$PAYLOAD" \
                "https://app.terraform.io/api/v2/workspaces/$WORKSPACE_ID/vars/$VAR_ID"
            fi
          }

          set_variable "AWS_ACCESS_KEY_ID" "$AWS_ACCESS_KEY"
          set_variable "AWS_SECRET_ACCESS_KEY" "$AWS_SECRET_KEY"

          if [ -n "$AWS_SESSION_TOKEN" ]; then
            set_variable "AWS_SESSION_TOKEN" "$AWS_SESSION_TOKEN"
          fi

          echo "‚úÖ Terraform Cloud variables updated."
