name: Sync Terraform Cloud Variables

on:
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: "Cloud Provider (aws, gcp, azure)"
        required: true
        type: choice
        options:
          - aws
          - gcp
          - azure
      workspace_name:
        description: "Terraform Cloud Workspace Name (optional override)"
        required: false
        default: ""

jobs:
  sync-vars:
    runs-on: ubuntu-latest
    env:
      TFC_TOKEN: ${{ secrets.TF_TOKEN_app_terraform_io }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      CLOUD_PROVIDER: ${{ inputs.cloud_provider }}
      WORKSPACE_NAME_INPUT: ${{ inputs.workspace_name }}

    steps:
      - name: Install Tools
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Determine Workspace and Org
        id: vars
        run: |
          ORG_NAME="ChurchoftheLivingGodIntlInc"
          if [[ -z "$WORKSPACE_NAME_INPUT" ]]; then
            WORKSPACE_NAME="clgi-wordpress-${CLOUD_PROVIDER}"
          else
            WORKSPACE_NAME="$WORKSPACE_NAME_INPUT"
          fi
          echo "ORG_NAME=$ORG_NAME" >> $GITHUB_OUTPUT
          echo "WORKSPACE_NAME=$WORKSPACE_NAME" >> $GITHUB_OUTPUT

      - name: Get Workspace ID from Terraform Cloud
        id: workspace_id
        run: |
          RESPONSE=$(curl -sS \
            --header "Authorization: Bearer $TFC_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/${{ steps.vars.outputs.ORG_NAME }}/workspaces/${{ steps.vars.outputs.WORKSPACE_NAME }}")

          WORKSPACE_ID=$(echo "$RESPONSE" | jq -r '.data.id')

          if [ "$WORKSPACE_ID" = "null" ] || [ -z "$WORKSPACE_ID" ]; then
            echo "‚ùå Workspace not found or API error."
            echo "$RESPONSE"
            exit 1
          fi

          echo "WORKSPACE_ID=$WORKSPACE_ID" >> $GITHUB_OUTPUT

      - name: Upsert Env Variables
        run: |
          workspace_id="${{ steps.workspace_id.outputs.WORKSPACE_ID }}"

          upsert_var() {
            key="$1"
            value="$2"
            sensitive="$3"

            VAR_ID=$(curl -sS \
              --header "Authorization: Bearer $TFC_TOKEN" \
              --header "Content-Type: application/vnd.api+json" \
              "https://app.terraform.io/api/v2/workspaces/$workspace_id/vars" \
              | jq -r --arg key "$key" '.data[] | select(.attributes.key == $key and .attributes.category == "env") | .id')

            if [[ -n "$VAR_ID" && "$VAR_ID" != "null" ]]; then
              echo "üîÅ Updating existing variable: $key"
              curl -sS --request PATCH \
                --header "Authorization: Bearer $TFC_TOKEN" \
                --header "Content-Type: application/vnd.api+json" \
                --data @- "https://app.terraform.io/api/v2/workspaces/$workspace_id/vars/$VAR_ID" <<EOF
{
  "data": {
    "id": "$VAR_ID",
    "type": "vars",
    "attributes": {
      "key": "$key",
      "value": "$value",
      "category": "env",
      "hcl": false,
      "sensitive": $sensitive
    }
  }
}
EOF
            else
              echo "‚ûï Creating new variable: $key"
              curl -sS --request POST \
                --header "Authorization: Bearer $TFC_TOKEN" \
                --header "Content-Type: application/vnd.api+json" \
                --data @- "https://app.terraform.io/api/v2/workspaces/$workspace_id/vars" <<EOF
{
  "data": {
    "type": "vars",
    "attributes": {
      "key": "$key",
      "value": "$value",
      "category": "env",
      "hcl": false,
      "sensitive": $sensitive
    }
  }
}
EOF
            fi
          }

          upsert_var "AWS_ACCESS_KEY_ID" "$AWS_ACCESS_KEY_ID" true
          upsert_var "AWS_SECRET_ACCESS_KEY" "$AWS_SECRET_ACCESS_KEY" true

          if [[ -n "$AWS_SESSION_TOKEN" && "$AWS_SESSION_TOKEN" != "null" ]]; then
            upsert_var "AWS_SESSION_TOKEN" "$AWS_SESSION_TOKEN" true
          fi
