name: Terraform Multi-Cloud Deployment

on:
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: "Cloud provider (aws, gcp, azure)"
        required: true
        type: choice
        options: [aws, gcp, azure]
      deployment_mode:
        description: "Deployment mode"
        required: true
        type: choice
        options: [sandbox, production]
      auto_delete_after_24h:
        description: "Enable auto-delete after 24h"
        required: true
        type: choice
        options: ["true", "false"]
      setup_demo_clone:
        description: "Clone demo content? Options: none, basic, full"
        required: false
        default: "none"
      clone_target_url:
        description: "Git URL to demo app (if cloning)"
        required: false
      ssh_allowed_ip:
        description: "CIDR IP range allowed to SSH"
        required: true
        default: "0.0.0.0/0"

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      TF_VAR_cloud_provider: ${{ inputs.cloud_provider }}
      TF_VAR_deployment_mode: ${{ inputs.deployment_mode }}
      TF_VAR_auto_delete_after_24h: ${{ inputs.auto_delete_after_24h == 'true' }}
      TF_VAR_setup_demo_clone: ${{ inputs.setup_demo_clone }}
      TF_VAR_clone_target_url: ${{ inputs.clone_target_url }}
      TF_VAR_ssh_allowed_ip: ${{ inputs.ssh_allowed_ip }}
      TF_VAR_vm_name: "clgi-vm"
      TF_VAR_vm_size: "t3.medium"

      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
      TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
      TF_VAR_ssh_password: ${{ secrets.SSH_PASSWORD }}
      TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS_JSON }}
      TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_azure_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Manually Install Terraform
        run: |
          curl -fsSL https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip -o terraform.zip
          unzip terraform.zip
          sudo mv terraform /usr/local/bin/
          terraform -version

      - name: Normalize boolean inputs
        run: |
          echo "AUTO_DELETE=$( [[ '${{ inputs.auto_delete_after_24h }}' == 'true' ]] && echo true || echo false )" >> $GITHUB_ENV

      - name: Generate terraform.auto.tfvars.json
        run: |
          mkdir -p deployments/${{ inputs.cloud_provider }}

          jq -n \
            --arg cloud_provider "${{ inputs.cloud_provider }}" \
            --arg deployment_mode "${{ inputs.deployment_mode }}" \
            --argjson auto_delete_after_24h "$AUTO_DELETE" \
            --arg setup_demo_clone "${{ inputs.setup_demo_clone }}" \
            --arg clone_target_url "${{ inputs.clone_target_url }}" \
            --arg ssh_allowed_ip "${{ inputs.ssh_allowed_ip }}" \
            --arg vm_name "clgi-vm" \
            --arg vm_size "t3.medium" \
            --arg ssh_public_key "${{ secrets.SSH_PUBLIC_KEY }}" \
            --arg ssh_private_key "${{ secrets.SSH_PRIVATE_KEY }}" \
            --arg ssh_password "${{ secrets.SSH_PASSWORD }}" \
            --arg aws_access_key "${{ secrets.AWS_ACCESS_KEY_ID }}" \
            --arg aws_secret_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            --arg aws_session_token "${{ secrets.AWS_SESSION_TOKEN }}" \
            --arg gcp_project_id "${{ secrets.GCP_PROJECT_ID }}" \
            --arg gcp_credentials "${{ secrets.GCP_CREDENTIALS_JSON }}" \
            --arg azure_client_id "${{ secrets.AZURE_CLIENT_ID }}" \
            --arg azure_client_secret "${{ secrets.AZURE_CLIENT_SECRET }}" \
            --arg azure_subscription_id "${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            --arg azure_tenant_id "${{ secrets.AZURE_TENANT_ID }}" \
            '{
              cloud_provider: $cloud_provider,
              deployment_mode: $deployment_mode,
              auto_delete_after_24h: $auto_delete_after_24h,
              setup_demo_clone: $setup_demo_clone,
              clone_target_url: $clone_target_url,
              ssh_allowed_ip: $ssh_allowed_ip,
              vm_name: $vm_name,
              vm_size: $vm_size,
              ssh_public_key: $ssh_public_key,
              ssh_private_key: $ssh_private_key,
              ssh_password: $ssh_password,
              aws_access_key: $aws_access_key,
              aws_secret_key: $aws_secret_key,
              aws_session_token: $aws_session_token,
              gcp_project_id: $gcp_project_id,
              gcp_credentials: $gcp_credentials,
              azure_client_id: $azure_client_id,
              azure_client_secret: $azure_client_secret,
              azure_subscription_id: $azure_subscription_id,
              azure_tenant_id: $azure_tenant_id
            }' > deployments/${{ inputs.cloud_provider }}/terraform.auto.tfvars.json

      - name: Check AWS Credentials (if AWS selected)
        if: ${{ inputs.cloud_provider == 'aws' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          echo "Checking AWS credentials..."
          aws sts get-caller-identity || (echo "❌ Invalid AWS credentials" && exit 1)

      - name: Check Azure Login (if Azure selected)
        if: ${{ inputs.cloud_provider == 'azure' }}
        run: |
          echo "Checking Azure credentials..."
          az account show || (echo "❌ Invalid Azure credentials" && exit 1)

      - name: Check GCP Auth (if GCP selected)
        if: ${{ inputs.cloud_provider == 'gcp' }}
        run: |
          echo "$TF_VAR_gcp_credentials" > "$HOME/gcp-creds.json"
          gcloud auth activate-service-account --key-file="$HOME/gcp-creds.json"
          gcloud auth list || (echo "❌ Invalid GCP credentials" && exit 1)

      - name: Copy Terraform Modules, Templates, and Scripts
        run: |
          mkdir -p deployments/${{ inputs.cloud_provider }}/modules deployments/${{ inputs.cloud_provider }}/templates deployments/${{ inputs.cloud_provider }}/scripts
          cp -R modules templates scripts deployments/${{ inputs.cloud_provider }}/

      - name: Terraform Init
        run: terraform -chdir=deployments/${{ inputs.cloud_provider }} init

      - name: Terraform Validate
        run: terraform -chdir=deployments/${{ inputs.cloud_provider }} validate

      - name: Terraform Plan
        run: terraform -chdir=deployments/${{ inputs.cloud_provider }} plan

      - name: Terraform Apply
        id: apply
        run: terraform -chdir=deployments/${{ inputs.cloud_provider }} apply -auto-approve
        continue-on-error: true

      - name: Recover Terraform State (if apply failed)
        if: failure() && steps.apply.outcome == 'failure'
        run: |
          if [ -f deployments/${{ inputs.cloud_provider }}/errored.tfstate ]; then
            echo "Found errored.tfstate. Attempting to push state..."
            terraform -chdir=deployments/${{ inputs.cloud_provider }} state push deployments/${{ inputs.cloud_provider }}/errored.tfstate
          else
            echo "No errored.tfstate found. Nothing to push."
          fi

      - name: Capture SSH Key for User
        run: |
          terraform -chdir=deployments/${{ inputs.cloud_provider }} output -raw ssh_private_key > private_key.pem
          chmod 600 private_key.pem
          cat private_key.pem

      - name: Store SSH Key in Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh_private_key
          path: private_key.pem
