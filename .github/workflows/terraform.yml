name: Terraform Multi-Cloud Deployment

on:
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: "Choose Cloud Provider"
        required: true
        type: choice
        options: [AWS, GCP, Azure]
        default: AWS

      deployment_mode:
        description: "Deployment mode (sandbox = Django, production = WordPress)"
        required: true
        type: choice
        options: [sandbox, production]
        default: sandbox

      auto_delete_after_24h:
        description: "Auto-delete after 24 hours? (Only applies in sandbox mode)"
        required: true
        type: choice
        options: [true, false]
        default: false

      setup_demo_clone:
        description: "Clone an existing site? (true/false)"
        required: true
        default: "false"

      clone_url:
        description: "URL of the site to clone (if applicable)"
        required: false

      vm_name:
        description: "Name of the VM"
        required: true
        default: "clgi-deploy"

      vm_size:
        description: "VM size (AWS: t3.medium, GCP: e2-medium, Azure: Standard_B1s)"
        required: true
        default: "t3.medium"

      region:
        description: "Cloud region (e.g., us-west-2)"
        required: true
        default: "us-west-2"

      zone:
        description: "GCP zone (e.g., us-central1-a)"
        required: false
        default: "us-central1-a"

      ssh_public_key_path:
        description: "Path to SSH public key (for GCP/Azure)"
        required: false
        default: "~/.ssh/id_rsa.pub"

      ssh_allowed_cidr:
        description: "CIDR allowed to SSH (e.g., your_ip/32)"
        required: true
        default: "0.0.0.0/0"

      wait_before_continue:
        description: "Wait 1 minute to double-check secrets setup?"
        required: true
        type: choice
        options: [yes, no]
        default: yes

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      TF_VAR_cloud_provider: ${{ github.event.inputs.cloud_provider }}
      TF_VAR_deployment_mode: ${{ github.event.inputs.deployment_mode }}
      TF_VAR_auto_delete_after_24h: ${{ github.event.inputs.auto_delete_after_24h }}
      TF_VAR_setup_demo_clone: ${{ github.event.inputs.setup_demo_clone }}
      TF_VAR_clone_target_url: ${{ github.event.inputs.clone_url }}
      TF_VAR_vm_name: ${{ github.event.inputs.vm_name }}
      TF_VAR_vm_size: ${{ github.event.inputs.vm_size }}
      TF_VAR_region: ${{ github.event.inputs.region }}
      TF_VAR_zone: ${{ github.event.inputs.zone }}
      TF_VAR_ssh_public_key_path: ${{ github.event.inputs.ssh_public_key_path }}
      TF_VAR_ssh_ip_address: ${{ github.event.inputs.ssh_allowed_cidr }}

      TF_VAR_ssh_password: ${{ secrets.SSH_PASSWORD }}

      # Cloud Secrets
      TF_VAR_gcp_key_file: ${{ secrets.GCP_KEY_FILE }}
      TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT }}
      TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_azure_secret: ${{ secrets.AZURE_SECRET }}
      TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      TF_VAR_aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ github.event.inputs.region }}

    steps:
      - name: Check Cloud Credentials Reminder
        run: |
          echo "::warning::Make sure you've added all required cloud credentials as GitHub secrets before continuing."
          if [ "${{ github.event.inputs.wait_before_continue }}" = "yes" ]; then
            echo "Waiting 60 seconds for you to verify credentials..."
            sleep 60
          else
            echo "Continuing without delay..."
          fi

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.cloud_provider == 'AWS' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Debug AWS Environment Variables
        if: ${{ github.event.inputs.cloud_provider == 'AWS' }}
        run: |
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:0:4}***"
          echo "AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN:0:4}***"

      - name: Verify AWS Credentials
        if: ${{ github.event.inputs.cloud_provider == 'AWS' }}
        run: |
          aws sts get-caller-identity --region ${AWS_REGION}

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Show Public IP
        run: |
          VM_IP=$(terraform output -raw vm_ip 2>/dev/null || echo "N/A")
          echo "VM_IP=$VM_IP" >> $GITHUB_ENV
          echo "Your server is available at: http://$VM_IP"

      - name: Cleanup orphaned AWS resources on failure
        if: failure() && github.event.inputs.cloud_provider == 'AWS'
        run: |
          echo "Cleaning up orphaned security groups..."
          aws ec2 describe-security-groups --query 'SecurityGroups[?GroupName==`default-sg`].[GroupId]' --output text | while read sgid; do
            echo "Attempting to delete Security Group $sgid"
            aws ec2 delete-security-group --group-id $sgid || echo "Failed to delete $sgid"
          done
