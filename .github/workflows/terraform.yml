name: Terraform Multi-Cloud Deployment

on:
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: "Choose Cloud Provider"
        required: true
        type: choice
        options: [aws, gcp, azure]
        default: aws

      deployment_mode:
        description: "sandbox = Django, production = WordPress"
        required: true
        type: choice
        options: [sandbox, production]
        default: sandbox

      auto_delete_after_24h:
        description: "Auto-delete after 24 hours?"
        required: true
        type: choice
        options: [true, false]
        default: false

      setup_demo_clone:
        description: "Setup demo clone by scraping a website?"
        required: true
        type: choice
        options: [true, false]
        default: false

      clone_target_url:
        description: "URL to scrape or clone"
        required: false
        default: ""

      vm_name:
        description: "VM Name"
        required: true
        default: "clgi-deploy"

      vm_size:
        description: "VM Size"
        required: true
        default: "t3.medium"

      region:
        description: "Region"
        required: true
        default: "us-west-2"

      ssh_allowed_cidr:
        description: "CIDR allowed to SSH"
        required: true
        default: "0.0.0.0/0"

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - run: echo "‚úÖ Terraform workflow is recognized"
  sync-secrets:
    uses: ./.github/workflows/sync-tfc-vars.yml
    with:
      cloud_provider: ${{ github.event.inputs.cloud_provider }}
    secrets:
      TFC_TOKEN: ${{ secrets.TF_TOKEN_app_terraform_io }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

  deploy:
    needs: sync-secrets
    runs-on: ubuntu-latest

    env:
      TF_VAR_cloud_provider: ${{ github.event.inputs.cloud_provider }}
      TF_VAR_deployment_mode: ${{ github.event.inputs.deployment_mode }}
      TF_VAR_auto_delete_after_24h: ${{ fromJson(github.event.inputs.auto_delete_after_24h) }}
      TF_VAR_setup_demo_clone: ${{ fromJson(github.event.inputs.setup_demo_clone) }}
      TF_VAR_clone_target_url: ${{ github.event.inputs.clone_target_url }}
      TF_VAR_vm_name: ${{ github.event.inputs.vm_name }}
      TF_VAR_vm_size: ${{ github.event.inputs.vm_size }}
      TF_VAR_aws_region: ${{ github.event.inputs.region }}
      TF_VAR_ssh_allowed_ip: ${{ github.event.inputs.ssh_allowed_cidr }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_ssh_password: ${{ secrets.SSH_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}

    steps:
      - name: Check Required Secrets
        run: |
          [[ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]] && { echo "‚ùå Missing SSH_PRIVATE_KEY"; exit 1; }
          [[ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]] && { echo "‚ùå Missing AWS_ACCESS_KEY_ID"; exit 1; }
          [[ -z "${{ secrets.TF_TOKEN_app_terraform_io }}" ]] && { echo "‚ùå Missing TF_TOKEN_app_terraform_io"; exit 1; }

      - name: Checkout Code
        uses: actions/checkout@v3

      # üîΩ Continue with original deployment logic here...
