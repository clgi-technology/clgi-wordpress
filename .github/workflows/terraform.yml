name: Terraform Multi-Cloud Deployment

on:
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: "Cloud provider (aws, gcp, azure)"
        required: true
        type: choice
        options:
          - aws
          - gcp
          - azure
      deployment_mode:
        description: "Deployment mode"
        required: true
        type: choice
        options:
          - sandbox
          - production
      auto_delete_after_24h:
        description: "Enable auto-delete after 24h"
        required: true
        type: choice
        options:
          - "true"
          - "false"
      setup_demo_clone:
        description: "Clone demo app?"
        required: true
        type: choice
        options:
          - "none"
          - "basic"
          - "full"
      clone_target_url:
        description: "Git URL to demo app (if cloning)"
        required: false
      ssh_allowed_ip:
        description: "CIDR IP range allowed to SSH"
        required: true
        default: "0.0.0.0/0"

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      TF_VAR_cloud_provider: ${{ inputs.cloud_provider }}
      TF_VAR_deployment_mode: ${{ inputs.deployment_mode }}
      TF_VAR_auto_delete_after_24h: ${{ inputs.auto_delete_after_24h }}
      TF_VAR_setup_demo_clone: ${{ inputs.setup_demo_clone }}
      TF_VAR_clone_target_url: ${{ inputs.clone_target_url }}
      TF_VAR_ssh_allowed_ip: ${{ inputs.ssh_allowed_ip }}
      TF_VAR_vm_name: "clgi-vm"
      TF_VAR_vm_size: "t3.medium"
      

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Copy Terraform Modules Before Init
        run: |
          mkdir -p deployments/${{ inputs.cloud_provider }}/modules deployments/${{ inputs.cloud_provider }}/templates deployments/${{ inputs.cloud_provider }}/scripts
          cp -R modules deployments/${{ inputs.cloud_provider }}/
          cp -R templates deployments/${{ inputs.cloud_provider }}/
          cp -R scripts deployments/${{ inputs.cloud_provider }}/

      - name: Terraform Init
        run: terraform -chdir=deployments/${{ inputs.cloud_provider }} init

      - name: Copy Terraform Modules Before Plan
        run: |
          mkdir -p deployments/${{ inputs.cloud_provider }}/modules deployments/${{ inputs.cloud_provider }}/templates deployments/${{ inputs.cloud_provider }}/scripts
          cp -R modules deployments/${{ inputs.cloud_provider }}/
          cp -R templates deployments/${{ inputs.cloud_provider }}/
          cp -R scripts deployments/${{ inputs.cloud_provider }}/

      - name: Terraform Plan
        run: terraform -chdir=deployments/${{ inputs.cloud_provider }} plan

      - name: Copy Terraform Modules Before Validate
        run: |
          mkdir -p deployments/${{ inputs.cloud_provider }}/modules deployments/${{ inputs.cloud_provider }}/templates deployments/${{ inputs.cloud_provider }}/scripts
          cp -R modules deployments/${{ inputs.cloud_provider }}/
          cp -R templates deployments/${{ inputs.cloud_provider }}/
          cp -R scripts deployments/${{ inputs.cloud_provider }}/

      - name: Terraform Validate
        run: terraform -chdir=deployments/${{ inputs.cloud_provider }} validate

      - name: Copy Terraform Modules Before Apply
        run: |
          mkdir -p deployments/${{ inputs.cloud_provider }}/modules deployments/${{ inputs.cloud_provider }}/templates deployments/${{ inputs.cloud_provider }}/scripts
          cp -R modules deployments/${{ inputs.cloud_provider }}/
          cp -R templates deployments/${{ inputs.cloud_provider }}/
          cp -R scripts deployments/${{ inputs.cloud_provider }}/

      - name: Terraform Apply
        run: terraform -chdir=deployments/${{ inputs.cloud_provider }} apply -auto-approve

      - name: Capture SSH Key for User
        run: |
          echo "ðŸ”‘ Generated SSH Key:"
          terraform output ssh_private_key > private_key.pem
          chmod 600 private_key.pem
          cat private_key.pem

      - name: Store SSH Key in Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh_private_key
          path: private_key.pem
