name: Terraform Multi-Cloud Deployment

on:
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: "Choose Cloud Provider"
        required: true
        type: choice
        options: [AWS, GCP, Azure]
        default: AWS

      deployment_mode:
        description: "Deployment mode (sandbox = Django, production = WordPress)"
        required: true
        type: choice
        options: [sandbox, production]
        default: sandbox

      setup_demo_clone:
        description: "Clone an existing site? (true/false)"
        required: true
        default: "false"

      clone_url:
        description: "URL of the site to clone (if applicable)"
        required: false

      vm_name:
        description: "Name of the VM"
        required: true
        default: "clgi-deploy"

      vm_size:
        description: "VM size (AWS: t3.medium, GCP: e2-medium, Azure: Standard_B1s)"
        required: true
        default: "t3.medium"

      region:
        description: "Cloud region (e.g., us-west-2)"
        required: true
        default: "us-west-2"

      ssh_allowed_cidr:
        description: "CIDR allowed to SSH (e.g., your_ip/32)"
        required: true
        default: "0.0.0.0/0"

      wait_before_continue:
        description: "Wait 1 minute to double-check secrets setup?"
        required: true
        type: choice
        options: [yes, no]
        default: yes

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # Generic TF_VARs for all providers
      TF_VAR_cloud_provider: ${{ github.event.inputs.cloud_provider }}
      TF_VAR_deployment_mode: ${{ github.event.inputs.deployment_mode }}
      TF_VAR_setup_demo_clone: ${{ github.event.inputs.setup_demo_clone }}
      TF_VAR_clone_url: ${{ github.event.inputs.clone_url }}
      TF_VAR_vm_name: ${{ github.event.inputs.vm_name }}
      TF_VAR_vm_size: ${{ github.event.inputs.vm_size }}
      TF_VAR_region: ${{ github.event.inputs.region }}
      TF_VAR_ssh_allowed_cidr: ${{ github.event.inputs.ssh_allowed_cidr }}
      TF_VAR_ssh_password: ${{ secrets.SSH_PASSWORD }}

    steps:
      - name: Check Cloud Credentials Reminder
        run: |
          echo "::warning::Make sure you've added all required cloud credentials as GitHub secrets before continuing."
          if [ "${{ github.event.inputs.wait_before_continue }}" = "yes" ]; then
            echo "Waiting 60 seconds for you to verify credentials..."
            sleep 60
          else
            echo "Continuing without delay..."
          fi

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v2

      # AWS Deployment
      - name: Terraform Init and Apply - AWS
        if: ${{ github.event.inputs.cloud_provider == 'AWS' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          terraform init
          terraform apply -auto-approve -target=module.security_group -target=aws_instance.vm

      # GCP Deployment
      - name: Terraform Init and Apply - GCP
        if: ${{ github.event.inputs.cloud_provider == 'GCP' }}
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_KEY_FILE }}
        run: |
          terraform init
          terraform apply -auto-approve -target=google_compute_instance.vm

      # Azure Deployment
      - name: Terraform Init and Apply - Azure
        if: ${{ github.event.inputs.cloud_provider == 'Azure' }}
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform init
          terraform apply -auto-approve -target=azurerm_resource_group.rg -target=azurerm_virtual_network.vnet -target=azurerm_subnet.subnet -target=azurerm_public_ip.public_ip -target=azurerm_network_interface.nic -target=azurerm_linux_virtual_machine.vm

      - name: Show Public IP
        run: |
          echo "VM_IP=$(terraform output -raw vm_ip)" >> $GITHUB_ENV
          echo "Your server is available at: http://$(terraform output -raw vm_ip)"
