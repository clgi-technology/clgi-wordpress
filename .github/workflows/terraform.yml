name: Terraform Multi-Cloud Deployment

on:
  workflow_dispatch:
    inputs:
      cloud_provider:
        description: "Choose Cloud Provider"
        required: true
        type: choice
        options: [aws, gcp, azure]
        default: aws

      deployment_mode:
        description: "sandbox = Django, production = WordPress"
        required: true
        type: choice
        options: [sandbox, production]
        default: sandbox

      auto_delete_after_24h:
        description: "Auto-delete after 24 hours?"
        required: true
        type: choice
        options: [true, false]
        default: false

      setup_demo_clone:
        description: "Setup demo clone by scraping a website?"
        required: true
        type: choice
        options: [true, false]
        default: false

      clone_target_url:
        description: "URL to scrape or clone (e.g., https://www.clgi.org)"
        required: false
        default: ""

      vm_name:
        description: "VM Name"
        required: true
        default: "clgi-deploy"

      vm_size:
        description: "VM Size"
        required: true
        default: "t3.medium"

      region:
        description: "Region"
        required: true
        default: "us-west-2"

      ssh_allowed_cidr:
        description: "CIDR allowed to SSH (e.g. your_ip/32)"
        required: true
        default: "0.0.0.0/0"

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      TF_VAR_cloud_provider: ${{ github.event.inputs.cloud_provider }}
      TF_VAR_deployment_mode: ${{ github.event.inputs.deployment_mode }}
      TF_VAR_auto_delete_after_24h: ${{ github.event.inputs.auto_delete_after_24h == 'true' }}
      TF_VAR_setup_demo_clone: ${{ github.event.inputs.setup_demo_clone == 'true' }}
      TF_VAR_clone_target_url: ${{ github.event.inputs.clone_target_url }}
      TF_VAR_vm_name: ${{ github.event.inputs.vm_name }}
      TF_VAR_vm_size: ${{ github.event.inputs.vm_size }}
      TF_VAR_aws_region: ${{ github.event.inputs.region }}
      TF_VAR_ssh_allowed_ip: ${{ github.event.inputs.ssh_allowed_cidr }}

      # SSH Keys from GitHub Secrets
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_ssh_password: ${{ secrets.SSH_PASSWORD }}

      # AWS credentials for terraform provider (only if AWS selected)
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      # Terraform Account token
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_app_terraform_io }}


    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Debug TF Vars
        run: env | grep TF_VAR_

      - name: Setup SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform -chdir=deployments/${{ github.event.inputs.cloud_provider }} init

      - name: Terraform Validate
        run: terraform -chdir=deployments/${{ github.event.inputs.cloud_provider }} validate

      - name: Terraform Plan
        run: terraform -chdir=deployments/${{ github.event.inputs.cloud_provider }} plan

      - name: Terraform Apply
        run: terraform -chdir=deployments/${{ github.event.inputs.cloud_provider }} apply -auto-approve


      - name: Upload SSH Private Key Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-private-key
          path: ~/.ssh/id_rsa
          if-no-files-found: error
          retention-days: 1

      - name: Export Terraform Output IP
        id: tf_output
        run: |
          VM_IP=$(terraform -chdir=deployments/${{ github.event.inputs.cloud_provider }} output -raw vm_ip)
          echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT

      - name: Show Output
        run: echo "✅ Deployed to ${{ steps.tf_output.outputs.vm_ip }}"

      - name: Log Auto-Delete Plan
        if: ${{ github.event.inputs.auto_delete_after_24h == 'true' }}
        run: echo "⚠️ Auto-delete enabled — consider scheduling a destroy job in 24h."
